datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  isActive Boolean @default(true)
  isAdmin  Boolean @default(false)
  version  Int     @default(1)
}

model Password {
  hash    String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String @unique
  version Int    @default(1)
}

model Token {
  value     String   @id @unique
  payload   String
  type      String
  publicId  String   @unique
  usesLeft  Int      @default(1)
  expiresAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Incident {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userFirstName   String
  userLastName    String
  userEmail       String
  userPhoneNumber String
  userAffiliation String

  campus                String
  date                  String
  description           String
  location              String
  province              String
  subject               String
  impactDescription     String
  wasFirstExperience    String
  additionalInformation String

  identification      IncidentIdentification[]
  impact              IncidentImpact[]
  type                IncidentType[]
  didNotReportReasons DidNotReportReason[]

  wantsContact        Boolean @default(false)
  wantsSharedWithOrgs Boolean @default(false)
  didReport           Boolean @default(false)

  isActive Boolean @default(true)

  version Int            @default(1)
  files   IncidentFile[]
}

model IncidentIdentification {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model IncidentImpact {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model IncidentType {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model DidNotReportReason {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model IncidentFile {
  id          String   @id @default(cuid())
  href        String
  contentType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  incidentId  String
}
