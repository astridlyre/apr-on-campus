datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  isActive Boolean @default(true)
  isAdmin  Boolean @default(false)
  version  Int     @default(1)
}

model Password {
  hash    String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String @unique
  version Int    @default(1)
}

model Token {
  value     String   @id @unique
  payload   String
  type      String
  publicId  String   @unique
  usesLeft  Int      @default(1)
  expiresAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Incident {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userFirstName   String
  userLastName    String
  userEmail       String
  userAffiliation String

  date                String
  province            String
  subject             String
  location            IncidentLocation[]
  campus              String
  wantsContact        Boolean        @default(false)
  wantsSharedWithOrgs IncidentOrgs[]
  allowsSocialShare   Boolean        @default(false)
  didReport           Boolean        @default(false)

  type               IncidentType[]
  description        String
  impact             IncidentImpact[]
  impactDescription  String
  wasFirstExperience String
  wasSystemic        String

  identities            UserIdentity[]
  gender                String
  genderIdentities      UserGenderIdentity[]
  disability            String
  identityDescription   String
  additionalInformation String

  isActive Boolean @default(true)

  version Int @default(1)
}

model IncidentLocation {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model IncidentOrgs {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model IncidentImpact {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model IncidentType {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model UserIdentity {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}

model UserGenderIdentity {
  id         String    @id @default(cuid())
  name       String
  Incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?
}
